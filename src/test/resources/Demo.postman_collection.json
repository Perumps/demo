{
	"info": {
		"_postman_id": "bbed166a-9e26-466e-a6a8-86bdafa22988",
		"name": "Demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Foobar_OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Foobar OK\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"  pm.response.to.have.body(\"Success! Please see console for output.\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:50000/foobar?count=100",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"foobar"
					],
					"query": [
						{
							"key": "count",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Foobar_Non-Integer_Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Foobar NonInteger Count\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"  pm.response.to.have.body(\"Request does not contain a valid count value\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:50000/foobar?count=100A",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"foobar"
					],
					"query": [
						{
							"key": "count",
							"value": "100A"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Foobar_Empty_Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Foobar Empty Count\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"  pm.response.to.have.body(\"Request does not contain a valid count value\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:50000/foobar?count=",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"foobar"
					],
					"query": [
						{
							"key": "count",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Foobar_Missing_Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Foobar Missing Count\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"  pm.response.to.have.body(\"Parameter 'count' is missing in the request\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:50000/foobar",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"foobar"
					]
				}
			},
			"response": []
		},
		{
			"name": "Foobar_Zero_Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Foobar Zero Count\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"  pm.response.to.have.body(\"Request does not contain a valid count value\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:50000/foobar?count=0",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"foobar"
					],
					"query": [
						{
							"key": "count",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Foobar_Negative_Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Foobar Negative Count\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"  pm.response.to.have.body(\"Request does not contain a valid count value\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:50000/foobar?count=-1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"foobar"
					],
					"query": [
						{
							"key": "count",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sort_OK_Limit<ArraySize",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sort OK Limit < Array Size\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"  pm.response.to.have.body(\"[4,3]\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:50000/sort?inputArray=3,2,1,4&top=2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"sort"
					],
					"query": [
						{
							"key": "inputArray",
							"value": "3,2,1,4"
						},
						{
							"key": "top",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sort_OK_Limit=ArraySize",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sort OK Limit = Array Size\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"  pm.response.to.have.body(\"[4,3,2,1]\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:50000/sort?inputArray=3,2,1,4&top=4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"sort"
					],
					"query": [
						{
							"key": "inputArray",
							"value": "3,2,1,4"
						},
						{
							"key": "top",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sort_OK_Limit>ArraySize",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sort OK Limit > Array Size\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"  pm.response.to.have.body(\"[4,3,2,1]\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:50000/sort?inputArray=3,2,1,4&top=6",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"sort"
					],
					"query": [
						{
							"key": "inputArray",
							"value": "3,2,1,4"
						},
						{
							"key": "top",
							"value": "6"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sort_Non-Interger_Array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sort NonInteger Array\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"  pm.response.to.have.body(\"Input array contains non-numeric values\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:50000/sort?inputArray=3,2,A,1&top=2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"sort"
					],
					"query": [
						{
							"key": "inputArray",
							"value": "3,2,A,1"
						},
						{
							"key": "top",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sort_Non-Interger_Top",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sort NonInteger Top < Array Size\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"  pm.response.to.have.body(\"Request does not contain a valid top value\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:50000/sort?inputArray=3,2,1&top=2A",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"sort"
					],
					"query": [
						{
							"key": "inputArray",
							"value": "3,2,1"
						},
						{
							"key": "top",
							"value": "2A"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sort_Empty_Array",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "pm.test(\"Sort Empty Array\", function () {\r\n  pm.response.to.have.status(400);\r\n  pm.response.to.have.body(\"Request does not contain a valid input array\")\r\n});"
				},
				"url": {
					"raw": "http://localhost:50000/sort?inputArray=&top=2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"sort"
					],
					"query": [
						{
							"key": "inputArray",
							"value": ""
						},
						{
							"key": "top",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sort_Empty_Top",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sort Empty Top\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"  pm.response.to.have.body(\"Request does not contain a valid top value\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:50000/sort?inputArray=3,2,1&top=",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"sort"
					],
					"query": [
						{
							"key": "inputArray",
							"value": "3,2,1"
						},
						{
							"key": "top",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sort_Missing_Top",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sort Missing Top\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"  pm.response.to.have.body(\"Parameter 'top' is missing in the request\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:50000/sort?inputArray=3,2,1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"sort"
					],
					"query": [
						{
							"key": "inputArray",
							"value": "3,2,1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sort_Missing_Array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sort Missing Array\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"  pm.response.to.have.body(\"Parameter 'inputArray' is missing in the request\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:50000/sort?&top=2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"sort"
					],
					"query": [
						{
							"key": null,
							"value": null
						},
						{
							"key": "top",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Anagram_IsAnagramTrue_OK",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "pm.test(\"Anagram True OK\", function () {\r\n  pm.response.to.have.status(200);\r\n  pm.response.to.have.body(\"The strings are anagrams!\")\r\n});"
				},
				"url": {
					"raw": "http://localhost:50000/anagram?string1=ABC&string2=BAC",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"anagram"
					],
					"query": [
						{
							"key": "string1",
							"value": "ABC"
						},
						{
							"key": "string2",
							"value": "BAC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Anagram_IsAnagramFalse_OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Anagram False OK\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"  pm.response.to.have.body(\"The strings are not anagrams!\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:50000/anagram?string1=ABC&string2=BAD",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"anagram"
					],
					"query": [
						{
							"key": "string1",
							"value": "ABC"
						},
						{
							"key": "string2",
							"value": "BAD"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Anagram_Blank_String1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Anagram Blank String 1\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"  pm.response.to.have.body(\"Request should contain two non-empty input strings\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:50000/anagram?string1=&string2=BAD",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"anagram"
					],
					"query": [
						{
							"key": "string1",
							"value": ""
						},
						{
							"key": "string2",
							"value": "BAD"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Anagram_Missing_String1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Anagram Missing String 1\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"  pm.response.to.have.body(\"Parameter 'string1' is missing in the request\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:50000/anagram?string2=BAD",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"anagram"
					],
					"query": [
						{
							"key": "string2",
							"value": "BAD"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Anagram_Blank_String2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Anagram Blank String 2\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"  pm.response.to.have.body(\"Request should contain two non-empty input strings\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:50000/anagram?string1=ABC&string2=",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"anagram"
					],
					"query": [
						{
							"key": "string1",
							"value": "ABC"
						},
						{
							"key": "string2",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Anagram_Missing_String2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Anagram Missing String 2\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"  pm.response.to.have.body(\"Parameter 'string2' is missing in the request\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:50000/anagram?string1=ABC",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50000",
					"path": [
						"anagram"
					],
					"query": [
						{
							"key": "string1",
							"value": "ABC"
						}
					]
				}
			},
			"response": []
		}
	]
}